source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "heart failure")
source("best.R")
best("MD", "heart failure")
debug(best)
best("MD", "heart failure")
vOutcomes
state
outcome
resume
restart
restart
quit
exit
resume()
restart()
debug
source("best.R")
best("MD", "heart failure")
best("MD", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
Q
quit
exit
source("rankhospital.R")
rankhospital("MN", "heart attack", 5000)
head(texas)
rankhospital("MD", "heart failure", 5)
source("rankhospital.R")
rankhospital("MD", "heart failure", 5)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
rankhospital("MD", "heart failure", 5)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
head(Texas)
head(texas)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(texas)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
debug(numberHelper)
head(rankall("heart attack", 20), 10)
num
Q
q
q
source("rankall.R")
head(rankall("heart attack", 20), 10)
debug(numberHelper)
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
set.seed(1)
rpois(5, 2)
rnorm
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
submit()
submit()
submit()
(TRUE != FALSE)
!(6 == 7)
TRUE && 62 < 62 && 44 >= 44
99.99 > 100 || 45 < 7.3 || 4 != 4.0
TRUE && FALSE || 9 >= 4 && 3 < 6
6 >= -9 && !(6 > 7) && !(!TRUE)
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
!isTRUE(4 < 3)
xor(!!TRUE, !!FALSE)
xor(4 >= 9, 8 != 8.0)
ints < 2
ints <- sample(10)
ints < 2
which(ints <= 2)
any(ints == 10)
library(xlsx)
import xlsx
import xlsx
sudo apt-get install openjdk-7-*
install.packages("xlsx")
library(xlsx)
install.packages("XML")
library(data)
library(data.table)
install.packages("data.table")
---
title: "Exploratory Data Analysis - Project 1"
author: "Shree"
date: "June 11, 2015"
---
# Exploratory Data Analysis - Project 1
This is my project 1 submission under Exploratory Data Analysis. There are 8
files related to this project. 4 scripts to generate the graphs and 4 images
of graphs generated by these script files. I also adding the data file used for
this.
Before running these scripts do following:
* Copy all these files to a folder. Set that folder as working
directory.
* Extract the data from zip file
* Run the scripts
# Exploratory Data Analysis - Project 1
This is my project 1 submission under Exploratory Data Analysis. There are 8
files related to this project. 4 scripts to generate the graphs and 4 images
of graphs generated by these script files. I also adding the data file used for
this.
Before running these scripts do following:
* Copy all these files to a folder. Set that folder as working
directory.
* Extract the data from zip file
* Run the scripts
library(swirl)
swirl()
install_from_swirl("Regression Models")
introduction
swirl()
swirl()
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
View(swiss)
mdl <- lm(x1, Fertility)
mdl <- lm(age, Fertility)
mdl <- lm(age, Fertility)
mdl <- lm(age, Fertility)
mdl <- lm(Fertility ~ ., swiss)
mdl <- lm(Fertility ~ ., swiss)
head(swiss)
import(/Library/Frameworks/R.framework/Versions/3.1/Resources/library/datasets/data/Rdata.rdb)
import(swiss)
library(swiss)
head(swiss)
library(swirl)
library(swirl)
data(mtcars)
n <- length(mtcars$mpg)
alfa <- 0.05
fit <- lm(mpg ~ am, data = mtcars)
coef(summary(fit
))
library(AppliedPredictiveModeling)
import(AppliedPredictiveModeling)
library(caret)
install.packages(“caret”)
install.packages(caret)
install.packages('caret)
q
)
''
''
install.packages('caret')
install.packages('AppliedPredictiveModeling')
import(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE
)
library(caret)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(Hmisc)
import.packages(Hmisc)
install.packages('Hmisc')
library(Hmisc)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() + theme_bw()
cutCS <- cut2(training$CompressiveStrength, g = 4)
summary(cutCS)
ggplot(data = training, aes(y = index, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") + theme_bw()
featurePlot(x = training[, names], y = cutCS, plot = "box")
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
bins=20
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ncol(training)
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
training$diagnosis = as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation[,1:7]
qplot(1:length(p$sdev),p$sdev / sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .9)
(cumsum(p$sdev) / sum(p$sdev))[8]
preProc <- preProcess(training[,grep('^IL',names(training))],method="pca",thres=.9)
preProc
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
training = adData[ inTrain,]
training = adData[~inTrain,]
testing = adData[-inTrain,]
training = adData[inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,] testing = adData[-inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
install.packages(e1071)
install.packages('e1071')
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
trainSmall
head trainSmall
head(trainSmall)
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
PCFit <- train(trainSmall$training.diagnosis~., data=trainPC,method="glm")
PCFit <- train(trainSmall$training.diagnosis~., data=trainPC, method='glm')
PCFit <- train(trainSmall$training.diagnosis~. , data=trainPC, method='glm')
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram() + theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, breaks=20)
hist(log(training$Superplasticizer+1), breaks=20)
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
suppressMessages(library(caret))
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.6,
list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit$finalModel
suppressMessages(library(rattle))
install.packages('GTK_2.24.17-X11.pkg')
install.packages('RGtk2')
install.packages("RGtk2")
library(rpart.plot)
library(rpart)
library(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages('fancyRpartPlot')
library(fancyRpartPlot)
library('fancyRpartPlot'')
library('fancyRpartPlot')
library('fancyRpartPlot')
install.packages('fancyRpartPlot')
install.packages("fancyRpartPlot")
library('fancyRpartPlot')
fancyRpartPlot(modFit$finalModel)
install.packages('rattle')
library('rattle')
fancyRpartPlot(modFit$finalModel)
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
sampleData = training[1:4,]
sampleData[1, c('TotalIntenCh2', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh2', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData[2,], verbose = TRUE)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
library(rpart)
library(caret)
library(caret)
install.packages("shiny")
library(shiny)
library(shiny) library(miniUI)
myFirstGadget <- function() { ui <- miniPage(
gadgetTitleBar("My First Gadget") )
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, { stopApp()
}) }
runGadget(ui, server) }
library(shiny)
library(miniUI)
install.packages("miniUI")
library(miniUI)
myFirstGadget <- function() { ui <- miniPage(
gadgetTitleBar("My First Gadget") )
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, { stopApp()
}) }
runGadget(ui, server) }
runGadget(ui, server)
myFirstGadget <- function() { ui <- miniPage(
+ gadgetTitleBar("My First Gadget") )
+   server <- function(input, output, session) {
+     # The Done button closes the app
+ observeEvent(input$done, { stopApp()
+ }) }
myFirstGadget <- function() { ui <- miniPage(
+ gadgetTitleBar("My First Gadget") )
+   server <- function(input, output, session) {
+     # The Done button closes the app
+ observeEvent(input$done, { stopApp()
+ })
myFirstGadget <- function() { ui <- miniPage(
gadgetTitleBar("My First Gadget") )
server <- function(input, output, session) {
observeEvent(input$done, { stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
library(plotly)
install.packages(plotly)
install.packages("plotly")
library(plotly)
install.packages("ggplot2")
library(plotly)
library(quantmod)
install.packages("quantmod")
library(quantmod)
set.seed(1024)
getSymbols("GOOG", src = "yahoo", env = environment())
getSymbols("AAPL", src = "yahoo", env = environment())
d_google <- data.frame(GOOG)
d_apple <- data.frame(AAPL)
plot(d_google, d_apple)
g <- ggplot(d_google,d_apple)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am, labels = c("Manual", "Automatic"))
g <- ggplot(mtcars, aes(mpg, fill = as.factor(cyl)))+geom_histogram(binwidth = 1)+ggtitle("Histogram of miles per gallon from MTCARS") +facet_wrap(~am)
ggplotly(g)
p <- plot_ly(d_google, x = ~Date) %>%
add_lines(y = ~AAPL.Adjusted, name = "Apple")
ggplotly(p)
d_google
View(d_google)
ggplot(d_google, aes(d_google,d_google$GOOG.Close)) + geom_line(aes(colour = companies))
ggplot(d_google, aes(d_google,d_google$GOOG.Close))
ggplot(d_google)
install.packages("stringi")
install.packages("stringi")
install.packages("ggplot2")
install.packages("RWeka")
install.packages("RWeka")
install.packages("RWeka")
install.packages("stringi")
install.packages("ggplot2")
install.packages("RWeka")
JAVA_HOME=/Library/Java/Home
install.packages("RWeka")
library(rJava)
.jinit()
install.packages("RWeka")
rm(list=ls(all=TRUE));gc(reset=TRUE);par(mfrow=c(1,1))
require(tm); require(SnowballC); require(stringr);require(RWeka);
require(qdap); require(scales); require(gridExtra); require(data.table)
load('completed/ngrams_model.RData')
load('completed/Quatrgrams_completed.RData')
source('SwiftKey-Natural-language/Task_1.5_Tokenization_func.R')
install.packages("stylo")
library(stylo)
shiny::runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
install.packages("data.table")
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
install.packages("tm")
install.packages("stringr")
install.packages("RWeka")
install.packages("dplyr")
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
install.packages("RWeka")
runApp()
runApp(server.R)
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
install.packages("rjava")
install.packages("rJava")
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
$JAVA_HOME
version
R.version
shiny::runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
require(rJava)
install.packages("rJava")
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
install.packages("RWeka")
install.packages("tm")
install.packages("tm")
install.packages("shiny")
install.packages("stylo")
install.packages("data.table")
install.packages("stringr")
install.packages("dplyr")
shiny::runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
J("java.lang.System","getProperty","java.version")
java.version()
getProperties()
getProperties("JAVA_HOME")
shiny::runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
runApp('~/Documents/My/coursera_capstone/shreeCapstone/ShreeCapstone')
